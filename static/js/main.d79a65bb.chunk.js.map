{"version":3,"sources":["App.tsx","index.tsx"],"names":["MyGatewayChecker","gatewayStatus","gatewayToken","requestGatewayToken","useGateway","_jsxs","style","border","margin","padding","children","_jsx","GatewayStatus","publicKey","toBase58","onClick","async","console","log","warn","err","error","GatewayContainer","network","WalletAdapterNetwork","Devnet","endpoint","clusterApiUrl","gatekeeperNetwork","PublicKey","connected","signTransaction","useWallet","GatewayProvider","connection","Connection","cluster","wallet","undefined","WalletMultiButton","App","wallets","PhantomWalletAdapter","SolflareWalletAdapter","ConnectionProvider","WalletProvider","autoConnect","WalletModalProvider","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"2UA6BA,MAAMA,EAA6BA,KACjC,MAAM,cAAEC,EAAa,aAAEC,EAAY,oBAAEC,GAAwBC,cAe7D,OACEC,eAAA,OAAKC,MAAO,CAAEC,OAAQ,iBAAkBC,OAAQ,SAAUC,QAAS,QAASC,SAAA,CAC1EC,cAAA,MAAAD,SAAI,sBACJL,eAAA,KAAAK,SAAA,CAAG,WACOC,cAAA,KAAAD,SAAIE,IAAcX,QAE3BC,EACCG,eAAA,KAAAK,SAAA,CAAG,wBACoBC,cAAA,SACrBA,cAAA,KAAAD,SAAIR,EAAaW,UAAUC,gBAG7BH,cAAA,KAAAD,SAAG,gCAELC,cAAA,UAAQI,QA3BcC,UACxBC,QAAQC,IAAI,gCACZ,IACMf,QACIA,IAENc,QAAQE,KAAK,oCAEjB,CAAE,MAAOC,GACPH,QAAQI,MAAM,yBAA0BD,EAC1C,GAiBqCV,SAAC,8BAChC,EAOJY,EAA6BA,KACjC,MAAMC,EAAUC,IAAqBC,OAC/BC,EAAWC,wBAAcJ,GACzBK,EAAoB,IAAIC,YAAU,gDAGlC,UAAEhB,EAAS,UAAEiB,EAAS,gBAAEC,GAAoBC,cAElD,OACErB,cAACsB,IAAe,CACdC,WAAY,IAAIC,aAAWT,EAAU,aACrCU,QAAQ,SACRR,kBAAmBA,EACnBS,OAAQ,CACNxB,YACAkB,gBAAgC,OAAfA,QAAe,IAAfA,SAAmBO,EACpCR,aACApB,SAEFL,eAAA,OAAKC,MAAO,CAAEE,OAAQ,QAASE,SAAA,CAC7BC,cAAA,MAAAD,SAAI,yCACJC,cAAC4B,IAAiB,IAClB5B,cAACX,EAAgB,QAEH,EA2BPwC,MApBf,WACE,MAAMjB,EAAUC,IAAqBC,OAC/BC,EAAWC,wBAAcJ,GAEzBkB,EAAU,CACd,IAAIC,IACJ,IAAIC,IAAsB,CAAEpB,aAG9B,OACEZ,cAACiC,IAAkB,CAAClB,SAAUA,EAAShB,SACrCC,cAACkC,IAAc,CAACJ,QAASA,EAASK,aAAW,EAAApC,SAC3CC,cAACoC,IAAmB,CAAArC,SAClBC,cAACW,EAAgB,SAK3B,EC9Ga0B,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACHzC,cAAC0C,IAAMC,WAAU,CAAA5C,SACfC,cAAC6B,EAAG,M","file":"static/js/main.d79a65bb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useWallet\n} from \"@solana/wallet-adapter-react\";\nimport {\n  WalletModalProvider,\n  WalletMultiButton\n} from \"@solana/wallet-adapter-react-ui\";\n\n// Import only the wallets you need (Phantom, Solflare) directly:\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\n\nimport {\n  GatewayProvider,\n  useGateway,\n  GatewayStatus\n} from \"@civic/solana-gateway-react\";\n\n// Default styling for the Solana wallet modal\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\n//\n// 1) A small component that uses the `useGateway` hook:\n//\nconst MyGatewayChecker: React.FC = () => {\n  const { gatewayStatus, gatewayToken, requestGatewayToken } = useGateway();\n\n  const handleRequestPass = async () => {\n    console.log(\"Request pass button clicked.\");\n    try {\n      if (requestGatewayToken) {\n        await requestGatewayToken();\n      } else {\n        console.warn(\"requestGatewayToken is undefined.\");\n      }\n    } catch (err) {\n      console.error(\"Error requesting pass:\", err);\n    }\n  };\n\n  return (\n    <div style={{ border: \"1px solid #ccc\", margin: \"1rem 0\", padding: \"1rem\" }}>\n      <h2>My Gateway Status</h2>\n      <p>\n        Status: <b>{GatewayStatus[gatewayStatus]}</b>\n      </p>\n      {gatewayToken ? (\n        <p>\n          Found gateway token: <br />\n          <b>{gatewayToken.publicKey.toBase58()}</b>\n        </p>\n      ) : (\n        <p>No gateway token found yet.</p>\n      )}\n      <button onClick={handleRequestPass}>Request or Refresh Pass</button>\n    </div>\n  );\n};\n\n//\n// 2) A container that sets up the GatewayProvider with the connected wallet\n//\nconst GatewayContainer: React.FC = () => {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = clusterApiUrl(network);\n  const gatekeeperNetwork = new PublicKey(\"uniqobk8oGh4XBLMqM68K8M2zNu3CdYX7q5go7whQiv\");\n\n  // Grab the user's currently selected wallet\n  const { publicKey, connected, signTransaction } = useWallet();\n\n  return (\n    <GatewayProvider\n      connection={new Connection(endpoint, \"processed\")}\n      cluster=\"devnet\"\n      gatekeeperNetwork={gatekeeperNetwork}\n      wallet={{\n        publicKey,\n        signTransaction: signTransaction ?? undefined,\n        connected\n      }}\n    >\n      <div style={{ margin: \"2rem\" }}>\n        <h1>Civic Gateway Without IdentityButton</h1>\n        <WalletMultiButton />\n        <MyGatewayChecker />\n      </div>\n    </GatewayProvider>\n  );\n};\n\n//\n// 3) Main App: sets up the ConnectionProvider/WalletProvider, then uses GatewayContainer\n//\nfunction App() {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = clusterApiUrl(network);\n\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter({ network })\n  ];\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <GatewayContainer />\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}