{"version":3,"sources":["App.tsx","index.tsx"],"names":["MyGatewayChecker","gatewayStatus","gatewayToken","requestGatewayToken","useGateway","_jsxs","style","border","margin","padding","children","_jsx","GatewayStatus","publicKey","toBase58","onClick","async","console","warn","err","error","App","_wallets$0$signTransa","network","WalletAdapterNetwork","Devnet","endpoint","clusterApiUrl","wallets","PhantomWalletAdapter","SolflareWalletAdapter","gatekeeperNetwork","PublicKey","ConnectionProvider","WalletProvider","autoConnect","WalletModalProvider","GatewayProvider","connection","Connection","cluster","wallet","signTransaction","bind","connected","WalletMultiButton","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"mUAyBA,MAAMA,EAA6BA,KACjC,MAAM,cAAEC,EAAa,aAAEC,EAAY,oBAAEC,GAAwBC,cAc7D,OACEC,eAAA,OAAKC,MAAO,CAAEC,OAAQ,iBAAkBC,OAAQ,SAAUC,QAAS,QAASC,SAAA,CAC1EC,cAAA,MAAAD,SAAI,sBACJL,eAAA,KAAAK,SAAA,CAAG,WAAQC,cAAA,KAAAD,SAAIE,IAAcX,QAC5BC,EACCG,eAAA,KAAAK,SAAA,CAAG,wBACoBC,cAAA,SACrBA,cAAA,KAAAD,SAAIR,EAAaW,UAAUC,gBAG7BH,cAAA,KAAAD,SAAG,gCAELC,cAAA,UAAQI,QAxBcC,UACxB,IACMb,QACIA,IAENc,QAAQC,KAAK,oCAEjB,CAAE,MAAOC,GACPF,QAAQG,MAAM,yBAA0BD,EAC1C,GAeqCT,SAAC,8BAChC,EAgDKW,MA5Cf,WAAgB,IAADC,EAEb,MAAMC,EAAUC,IAAqBC,OAC/BC,EAAWC,wBAAcJ,GAGzBK,EAAU,CACd,IAAIC,IACJ,IAAIC,IAAsB,CAAEP,aAIxBQ,EAAoB,IAAIC,YAAU,+CAExC,OACErB,cAACsB,IAAkB,CAACP,SAAUA,EAAShB,SACrCC,cAACuB,IAAc,CAACN,QAASA,EAASO,aAAW,EAAAzB,SAC3CC,cAACyB,IAAmB,CAAA1B,SAClBC,cAAC0B,IAAe,CACdC,WAAY,IAAIC,aAAWb,EAAU,aACrCc,QAAQ,SACRT,kBAAmBA,EACnBU,OAAQ,CACN5B,UAAWe,EAAQ,GAAGf,UACtB6B,gBAA2C,QAA5BpB,EAAEM,EAAQ,GAAGc,uBAAe,IAAApB,OAAA,EAA1BA,EAA4BqB,KAAKf,EAAQ,IAC1DgB,WAAW,GACXlC,SAEFL,eAAA,OAAKC,MAAO,CAAEE,OAAQ,QAASE,SAAA,CAC7BC,cAAA,MAAAD,SAAI,yCAGJC,cAACkC,IAAiB,IAGlBlC,cAACX,EAAgB,cAO/B,EC7Fa8C,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACHvC,cAACwC,IAAMC,WAAU,CAAA1C,SACfC,cAACU,EAAG,M","file":"static/js/main.404ba1d8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Connection, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider\n} from \"@solana/wallet-adapter-react\";\nimport {\n  WalletModalProvider,\n  WalletMultiButton\n} from \"@solana/wallet-adapter-react-ui\";\n\n// Import only the wallets you need (Phantom, Solflare) directly:\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\n\nimport { GatewayProvider, useGateway, GatewayStatus } from \"@civic/solana-gateway-react\";\n\n// (Optional) default styling for the Solana wallet modal\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\n\n\n\n// 1) A small component that uses the `useGateway` hook:\nconst MyGatewayChecker: React.FC = () => {\n  const { gatewayStatus, gatewayToken, requestGatewayToken } = useGateway();\n\n  const handleRequestPass = async () => {\n    try {\n      if (requestGatewayToken) {\n        await requestGatewayToken();\n      } else {\n        console.warn(\"requestGatewayToken is undefined.\");\n      }\n    } catch (err) {\n      console.error(\"Error requesting pass:\", err);\n    }\n  };\n\n  return (\n    <div style={{ border: \"1px solid #ccc\", margin: \"1rem 0\", padding: \"1rem\" }}>\n      <h2>My Gateway Status</h2>\n      <p>Status: <b>{GatewayStatus[gatewayStatus]}</b></p>\n      {gatewayToken ? (\n        <p>\n          Found gateway token: <br />\n          <b>{gatewayToken.publicKey.toBase58()}</b>\n        </p>\n      ) : (\n        <p>No gateway token found yet.</p>\n      )}\n      <button onClick={handleRequestPass}>Request or Refresh Pass</button>\n    </div>\n  );\n};\n\nfunction App() {\n  // 2) Connect to devnet\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = clusterApiUrl(network);\n\n  // 3) Set up **only** the wallet adapters we actually need\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter({ network })\n  ];\n\n  // 4) Hardcode the gatekeeper network\n  const gatekeeperNetwork = new PublicKey(\"uniqobk8oGh4XBLMqM68K8M2zNu3CdYX7q5go7whQiv\");\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <GatewayProvider\n            connection={new Connection(endpoint, \"processed\")}\n            cluster=\"devnet\"\n            gatekeeperNetwork={gatekeeperNetwork}\n            wallet={{\n              publicKey: wallets[0].publicKey,\n              signTransaction: wallets[0].signTransaction?.bind(wallets[0])!,\n              connected: true,\n            }}\n          >\n            <div style={{ margin: \"2rem\" }}>\n              <h1>Civic Gateway Without IdentityButton</h1>\n\n              {/* 5) Provide a way for user to connect wallet */}\n              <WalletMultiButton />\n\n              {/* 6) Our custom gateway checker */}\n              <MyGatewayChecker />\n            </div>\n          </GatewayProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}